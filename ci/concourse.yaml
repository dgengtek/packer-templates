---
resource_types:
  - name: email
    type: docker-image
    source:
      repository: pcfseceng/email-resource
  - name: salt-pepper
    type: registry-image
    source:
      repository: ((registry.registry))/concourse-resource-salt-pepper
      username: ((registry.username))
      password: ((registry.password))
      tag: latest

resources:
  - name: r-salt
    type: salt-pepper
    source:
      uri: ((vars.salt_api_uri))
      username: ((r-salt.username))
      password: ((r-salt.password))
      eauth: ldap
      timeout: 3600

  - name: r-((git_repo_name))
    type: git
    check_every: "24h"
    webhook_token: ((webhook_token))
    source:
      uri: ((git_uri))
      branch: ((git_branch))
      private_key: ((r-git-ssh.private_key))
      ignore_paths:
        - ci/*
        - Dockerfile

  - name: r-((git_repo_name))-dockerfile
    type: git
    check_every: "24h"
    webhook_token: ((webhook_token))
    source:
      uri: ((git_uri))
      branch: ((git_branch))
      private_key: ((r-git-ssh.private_key))
      ignore_paths:
        - ci/*
      paths:
        - Dockerfile

  - name: r-email
    tags:
      - ssd
    type: email
    check_every: "24h"
    source:
      smtp:
        host: ((vars.smtp_host))
        port: "((vars.smtp_port))" # this must be a string
        username: ((r-email.username))
        password: ((r-email.password))
        host_origin: ((vars.smtp_helo))
      from: ((vars.smtp_from))
      to:
        - ((vars.smtp_to))


  - name: r-docker-image-from
    type: registry-image
    source:
      repository: ((registry.registry))/debian
      username: ((registry.username))
      password: ((registry.password))
      tag: bullseye-slim


  - name: r-docker-image-build
    type: registry-image
    check_every: "24h"
    source:
      username: ((registry.username))
      password: ((registry.password))
      repository: ((registry.registry))/((git_repo_name))
      tag: latest


  - name: pipelines
    type: git
    source:
      uri: ((vars.git_ssh_uri))/concourse/pipelines
      branch: ((git_branch))
      private_key: ((r-git-ssh.private_key))
      git_config:
        - name: core.bigFileThreshold
          value: 5M
      disable_ci_skip: true


  - name: every-30d
    type: time
    check_every: 24h
    source:
      interval: 720h


  - name: after-midnight
    type: time
    check_every: 1h
    source:
      start: "00:00"
      stop: "05:00"
      location: Europe/Berlin


jobs:
  - name: j-build-debian-base
    serial: true
    serial_groups:
      - imagebuild
    ensure:
      do:
        - put: r-salt
          params:
            tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
            tgt_type: compound
            fun: state.single
            args:
              - cmd.run
              - "./main.sh cleanup_build"
              - "queue=True"
            kwargs:
              shell: /bin/bash
              cwd: /data/tmp/packer-templates
              env:
                - DOCKER_REGISTRY: ((registry.registry))
                - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
                - PKR_VAR_build_directory: "/output/((.:git_ref))"

    plan:
      - in_parallel:
          fail_fast: true
          steps:
            - get: every-30d
              trigger: true
              passed:
                - j-cleanup-environment
                - after-midnight-only
            - get: r-((git_repo_name))
              trigger: true
              params:
                depth: 1
              passed:
                - j-prepare-environment
                - after-midnight-only
            - get: r-docker-image-build
              params:
                skip_download: true
              trigger: true
              passed:
                - j-build-image

      - load_var: git_ref
        file: r-((git_repo_name))/.git/ref

      - put: r-salt
        params:
          tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
          tgt_type: compound
          fun: state.single
          args:
            - cmd.run
            - "./main.sh debian base"
            - "queue=True"
          kwargs:
            shell: /bin/bash
            cwd: /data/tmp/packer-templates
            env:
              - DISTRIBUTION: debian-11.6-amd64
              - DOCKER_REGISTRY: ((registry.registry))
              - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
              - http_proxy: ((vars.http_proxy))
              - https_proxy: ((vars.https_proxy))
              - no_proxy: ((vars.no_proxy))
              - PKR_VAR_http_proxy: ((vars.http_proxy))
              - PKR_VAR_https_proxy: ((vars.https_proxy))
              - PKR_VAR_no_proxy: ((vars.no_proxy))
              - PKR_VAR_enable_pki_install: "true"
              - PKR_VAR_vault_addr: ((vars.vault_addr))
              - PKR_VAR_vault_pki_secrets_path: ((vars.vault_pki_path))
              - PKR_VAR_build_directory: "/output/((.:git_ref))"

      - put: r-salt
        params:
          tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
          tgt_type: compound
          fun: state.single
          args:
            - cmd.run
            - "queue=True"
          kwargs:
            name: |
                set -e
                mkdir -p "./${PKR_VAR_build_directory}"
                ./packer-templates/main.sh list
                ./packer-templates/main.sh cat "${PKR_VAR_build_directory}/debian" | tar -xf - -C "./${PKR_VAR_build_directory}"
                ls -lR "./${PKR_VAR_build_directory}"
                mc cp --recursive "./${PKR_VAR_build_directory}/debian" data/images/packer/
            shell: /bin/bash
            cwd: /data/tmp
            env:
              - MC_HOST_data: "https://((minio/packer-templates.access_key)):((minio/packer-templates.secret_key))@((vars.minio_host_data))"
              - DOCKER_REGISTRY: ((registry.registry))
              - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
              - http_proxy: ((vars.http_proxy))
              - https_proxy: ((vars.https_proxy))
              - no_proxy: ((vars.no_proxy))
              - PKR_VAR_http_proxy: ((vars.http_proxy))
              - PKR_VAR_https_proxy: ((vars.https_proxy))
              - PKR_VAR_no_proxy: ((vars.no_proxy))
              - PKR_VAR_build_directory: "/output/((.:git_ref))"


  - name: j-build-archlinux-base
    serial: true
    serial_groups:
      - imagebuild
    ensure:
      do:
        - put: r-salt
          params:
            tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
            tgt_type: compound
            fun: state.single
            args:
              - cmd.run
              - "./main.sh cleanup_build"
              - "queue=True"
            kwargs:
              shell: /bin/bash
              cwd: /data/tmp/packer-templates
              env:
                - DOCKER_REGISTRY: ((registry.registry))
                - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
                - PKR_VAR_build_directory: "/output/((.:git_ref))"
    plan:
      - in_parallel:
          fail_fast: true
          steps:
            - get: every-30d
              trigger: true
              passed:
                - j-cleanup-environment
                - after-midnight-only
            - get: r-((git_repo_name))
              trigger: true
              params:
                depth: 1
              passed:
                - j-prepare-environment
                - after-midnight-only
            - get: r-docker-image-build
              params:
                skip_download: true
              trigger: true
              passed:
                - j-build-image

      - load_var: git_ref
        file: r-((git_repo_name))/.git/ref

      - put: r-salt
        params:
          tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
          tgt_type: compound
          fun: state.single
          args:
            - cmd.run
            - "./main.sh arch base"
            - "queue=True"
          kwargs:
            shell: /bin/bash
            cwd: /data/tmp/packer-templates
            env:
              - DISTRIBUTION: archlinux-x86_64
              - DOCKER_REGISTRY: ((registry.registry))
              - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
              - http_proxy: ((vars.http_proxy))
              - https_proxy: ((vars.https_proxy))
              - no_proxy: ((vars.no_proxy))
              - PKR_VAR_http_proxy: ((vars.http_proxy))
              - PKR_VAR_https_proxy: ((vars.https_proxy))
              - PKR_VAR_no_proxy: ((vars.no_proxy))
              - PKR_VAR_enable_pki_install: "true"
              - PKR_VAR_vault_addr: ((vars.vault_addr))
              - PKR_VAR_vault_pki_secrets_path: ((vars.vault_pki_path))
              - PKR_VAR_build_directory: "/output/((.:git_ref))"

      - put: r-salt
        params:
          tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
          tgt_type: compound
          fun: state.single
          args:
            - cmd.run
            - "queue=True"
          kwargs:
            name: |
                set -e
                mkdir -p "./${PKR_VAR_build_directory}"
                ./packer-templates/main.sh list
                ./packer-templates/main.sh cat "${PKR_VAR_build_directory}/archlinux" | tar -xf - -C "./${PKR_VAR_build_directory}"
                ls -lR "./${PKR_VAR_build_directory}"
                mc cp --recursive "./${PKR_VAR_build_directory}/archlinux" data/images/packer/
            shell: /bin/bash
            cwd: /data/tmp
            env:
              - MC_HOST_data: "https://((minio/packer-templates.access_key)):((minio/packer-templates.secret_key))@((vars.minio_host_data))"
              - DOCKER_REGISTRY: ((registry.registry))
              - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
              - http_proxy: ((vars.http_proxy))
              - https_proxy: ((vars.https_proxy))
              - no_proxy: ((vars.no_proxy))
              - PKR_VAR_http_proxy: ((vars.http_proxy))
              - PKR_VAR_https_proxy: ((vars.https_proxy))
              - PKR_VAR_no_proxy: ((vars.no_proxy))
              - PKR_VAR_build_directory: "/output/((.:git_ref))"


  - name: j-build-debian-cloud
    serial: true
    serial_groups:
      - imagebuild
    ensure:
      do:
        - put: r-salt
          params:
            tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
            tgt_type: compound
            fun: state.single
            args:
              - cmd.run
              - "./main.sh cleanup_build"
              - "queue=True"
            kwargs:
              shell: /bin/bash
              cwd: /data/tmp/packer-templates
              env:
                - DOCKER_REGISTRY: ((registry.registry))
                - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
                - PKR_VAR_build_directory: "/output/((.:git_ref))"
    plan:
      - in_parallel:
          fail_fast: true
          steps:
            - get: every-30d
              trigger: true
              passed:
                - j-build-debian-base
                - j-cleanup-environment
                - after-midnight-only
            - get: r-((git_repo_name))
              trigger: true
              params:
                depth: 1
              passed:
                - j-prepare-environment
                - j-build-debian-base
                - after-midnight-only
            - get: r-docker-image-build
              params:
                skip_download: true
              trigger: true
              passed:
                - j-build-image

      - load_var: git_ref
        file: r-((git_repo_name))/.git/ref

      - put: r-salt
        params:
          tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
          tgt_type: compound
          fun: state.single
          args:
            - cmd.run
            - "./main.sh debian cloud"
            - "queue=True"
          kwargs:
            shell: /bin/bash
            cwd: /data/tmp/packer-templates
            env:
              - DISTRIBUTION: debian-11.6-amd64
              - DOCKER_REGISTRY: ((registry.registry))
              - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
              - http_proxy: ((vars.http_proxy))
              - https_proxy: ((vars.https_proxy))
              - no_proxy: ((vars.no_proxy))
              - PKR_VAR_http_proxy: ((vars.http_proxy))
              - PKR_VAR_https_proxy: ((vars.https_proxy))
              - PKR_VAR_no_proxy: ((vars.no_proxy))
              - PKR_VAR_iso_url: "((vars.minio_endpoint_data))/images/packer/debian/debian-11.6-amd64.qcow2"
              - PKR_VAR_iso_checksum: "file:((vars.minio_endpoint_data))/images/packer/debian/debian-11.6-amd64.sha256"
              - PKR_VAR_build_directory: "/output/((.:git_ref))"

      - put: r-salt
        params:
          tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
          tgt_type: compound
          fun: state.single
          args:
            - cmd.run
            - "queue=True"
          kwargs:
            name: |
                set -e
                mkdir -p "./${PKR_VAR_build_directory}"
                ./packer-templates/main.sh list
                ./packer-templates/main.sh cat "${PKR_VAR_build_directory}/cloud" | tar -xf - -C "./${PKR_VAR_build_directory}"
                ls -lR "./${PKR_VAR_build_directory}"
                mc cp --recursive "./${PKR_VAR_build_directory}/cloud" data/images/packer/
            shell: /bin/bash
            cwd: /data/tmp
            env:
              - MC_HOST_data: "https://((minio/packer-templates.access_key)):((minio/packer-templates.secret_key))@((vars.minio_host_data))"
              - DOCKER_REGISTRY: ((registry.registry))
              - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
              - http_proxy: ((vars.http_proxy))
              - https_proxy: ((vars.https_proxy))
              - no_proxy: ((vars.no_proxy))
              - PKR_VAR_http_proxy: ((vars.http_proxy))
              - PKR_VAR_https_proxy: ((vars.https_proxy))
              - PKR_VAR_no_proxy: ((vars.no_proxy))
              - PKR_VAR_build_directory: "/output/((.:git_ref))"


  - name: j-prepare-environment
    serial: true
    plan:
      - get: r-((git_repo_name))
        trigger: true
        params:
          depth: 1

      - put: r-salt
        attempts: 3
        params:
          tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
          tgt_type: compound
          fun: state.sls
          args:
            - "git,binary"
            - "queue=True"


  - name: j-cleanup-environment
    serial: true
    serial_groups:
      - imagebuild
    plan:
      - in_parallel:
          fail_fast: true
          steps:
            - get: r-((git_repo_name))
              trigger: false
              params:
                depth: 1
            - get: every-30d
              trigger: true

      - load_var: git_ref
        file: r-((git_repo_name))/.git/ref

      - put: r-salt
        params:
          tgt: "I@tags:imagebuilder and I@tags:hypervisor-kvm"
          tgt_type: compound
          fun: state.single
          args:
            - cmd.run
            - "queue=True"
          kwargs:
            name: |
                ./main.sh rm
                rm -rf "./${PKR_VAR_build_directory}"
            shell: /bin/bash
            cwd: /data/tmp/packer-templates
            env:
              - DOCKER_REGISTRY: ((registry.registry))
              - DOCKER_IMAGE_NAME: ((git_repo_name)):latest
              - PKR_VAR_build_directory: "/output/((.:git_ref))"


  - name: j-build-image
    serial: true
    plan:
      - in_parallel:
          fail_fast: true
          steps:
            - get: r-((git_repo_name))-dockerfile
              trigger: true
              params:
                depth: 1
              passed:
                - after-midnight-only
            - get: r-docker-image-from
              trigger: false
              params:
                depth: 1
              params:
                format: oci
            - get: pipelines
              trigger: false
              params:
                depth: 1

      - task: build-docker-image
        attempts: 3
        privileged: true
        file: "pipelines/task/build_docker_image.yaml"
        input_mapping:
          docker-from-image: r-docker-image-from
          image-src: r-((git_repo_name))-dockerfile
        output_mapping:
          image: image-build
        params:
          IMAGE_ARG_dockerfile_from_image: docker-from-image/image.tar
          CONTEXT: "."
          BUILD_ARG_http_proxy: ((vars.http_proxy))
          BUILD_ARG_no_proxy: ((vars.no_proxy))
          BUILD_ARG_author: ((author))

      - put: r-docker-image-build
        attempts: 3
        tags:
          - ssd
        inputs:
          - image-build
        params:
          image: image-build/image.tar
        on_failure:
          put: r-email
          tags:
            - ssd
          params:
            subject_text: "Build failed: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
            body_text: "Docker image build failed: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"



  - name: after-midnight-only
    plan:
      - in_parallel:
          attempts: 3
          fail_fast: true
          steps:
            - get: r-((git_repo_name))
              params:
                depth: 1
            - get: r-((git_repo_name))-dockerfile
              params:
                depth: 1
            - get: every-30d
              trigger: true
            - get: after-midnight
              trigger: true
