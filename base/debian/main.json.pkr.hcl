# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "qemu" "autogenerated_1" {
  accelerator      = "kvm"
  boot_command     = ["<esc><wait>", "install", " preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/debian-11.preseed", " debian-installer=en_US", " auto", " locale=en_US", " kbd-chooser/method=de", " keyboard-configuration/xkb-keymap=de", " netcfg/get_hostname=packer-debian-11", " netcfg/get_domain=intranet", " fb=false", " debconf/frontend=noninteractive", " console-setup/ask_detect=false", " console-keymaps-at/keymap=de", "<enter>"]
  boot_wait        = "1s"
  communicator     = "ssh"
  cpus             = "${var.cpus}"
  disk_compression = true
  disk_discard     = "unmap"
  disk_interface   = "virtio-scsi"
  disk_size        = "${var.disk_size}"
  format           = "qcow2"
  headless         = "${var.headless}"
  http_directory   = "srv/${local.os_name}"
  http_port_max    = 8100
  http_port_min    = 8000
  iso_checksum     = "${var.image_checksum}"
  iso_url          = "${var.image_uri}"
  memory           = "${var.memory}"
  net_device       = "virtio-net"
  output_directory = "${local.v.output_directory}"
  shutdown_command = "sudo systemctl poweroff"
  ssh_password     = "provision"
  ssh_username     = "provision"
  ssh_wait_timeout = "30m"
  vm_name          = "${var.distribution}.qcow2"
  vnc_bind_address = "0.0.0.0"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.qemu.autogenerated_1"]

  provisioner "shell" {
    inline       = ["echo 'wait for qemu reboot'"]
    only         = ["qemu"]
    pause_before = "15s"
  }

  provisioner "file" {
    destination = "/tmp/99-dhcp-wildcard.network"
    source      = "srv/99-dhcp-wildcard.network"
  }

  provisioner "shell" {
    inline = ["sudo mv /tmp/99-dhcp-wildcard.network /etc/systemd/network/99-dhcp-wildcard.network", "sudo chmod +r /etc/systemd/network/99-dhcp-wildcard.network"]
  }

  provisioner "shell" {
    environment_vars = ["ENABLE_PKI_INSTALL=${var.enable_pki_install}", "VAULT_ADDR=${var.vault_addr}", "VAULT_PKI_SECRETS_PATH=${var.vault_pki_secrets_path}"]
    execute_command  = "{{ .Vars }} sudo -E -S bash -c '{{ .Path }}'"
    scripts          = ["scripts/${local.os_name}/uninstall_network.sh", "scripts/${local.os_name}/fix_systemd_networkd.sh", "scripts/install_systemd-networkd.sh", "scripts/network_wait.sh", "scripts/${local.os_name}/install_requisites.sh", "scripts/${local.os_name}/install_pki.sh", "srv/enable_ssh.sh", "scripts/${local.os_name}/cleanup.sh", "scripts/cleanup_host.sh", "scripts/cleanup_logs.sh", "scripts/minimize.sh"]
  }

  post-processor "checksum" {
    checksum_types = ["sha256"]
    output         = "${local.v.output_directory}/${var.distribution}.sha256"
  }
}


locals {
  v = {
    output_directory = "${var.build_directory}/${var.distribution}"
  }
}
